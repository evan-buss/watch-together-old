 ☐ Create a login page where users enter their username and either create or join a room
 ☐ Add Hub methods that allow viewing data without modifying it (maintain thread safety)

Maybes:
    ☐ Websockets should belong to channels
        - If I make this more of a centralized application, users should only receive messages from their channel
        - Sort of a pub/sub style...


Probably going to restructure the layout. Not sure what my plans are tbh
    better ways to split api
    better naming for the imdb scraping library


Project Layout
    - `cmd` - Contains all binary commands and starts the application
    - `doc` - Contains all documentation to understand the project and document important development things I've learned along the way
    - `info` - Contains code to extract data from a given media file (makes use of ffprobe)
    - `server` - Contains code that serves the API and backend
    - `video` - Contains all media related code. Anything to turn a media file into an HLS playlist that is then served via the API
    - `web` - Contains all frontend code written in svelte.


Tomorrow:
    - Configure heroku hosting for frontend UI
        - Make front-end usable from a remote host. Just need to connect to the specified port number instead of reading it from the browser URL
          As a result, the host will also have to specifify their IP. I also need some sort of verification system that makes the host confirm that they are allowed to control the PC
          We need to prevent connected VIEWERS from controlling the stream.
    - Work on backend server. Start playing with video transcodes
    - Check my scraped status in the morning to confirm if it is working well...



Problems:
    - I can't connect to the websocket from the heroku host, because it uses https and you must connect to a wss not ws
    - I don't think I can have a certificate for a local IP address. You need a domain name to issue a certificate

New App Structure
    - Video streamer hosts the server on their local machine. The terminal should then display the public IP address
    - Viewers connect to the public IP and are served the UI.
    - The API will best hosted on a heroku instance
    - HTTPS is not attainable for a public IP. I would need each user to purchase a domain...